ADITYA UNIVERSITY COMPITITIVE PROGRAMMING

DAY1 MONDAY 09-06-2025
SESSION1:
APP INSTALLATIONS:
Note: 
1. Prefer installing the installer files (.msi)
2. Once the installer file is downloaded, cut and paste it in the respective folder inside the software folder in C drive.
3. Then double click the installer and install the app/software

Create 2 folders named:
"software" in C drive
"learning" in D/E/C drive

Inside the software folder creates the folders named:
notepad_pp
vs_code
eclipse
git
jdk
intellij

1. Notepad++:	For making quick notes
G Search: Download notepad++
Link: https://notepad-plus-plus.org/downloads/v8.7.7/

2. vs code
G Search: Download vs code
Link: https://code.visualstudio.com/download

3. Eclipse
G Search: Download eclipse
From the link: https://www.eclipse.org/downloads/
Click on download packages
Link: https://www.eclipse.org/downloads/packages/
Download: Eclipse IDE for Enterprise Java and Web Developers (Select the OS)

4. git
G search: Download git
Link: https://git-scm.com/downloads
Click on the OS running on your system

5. JDK
G Search: Download JDK 17
Link: https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
Click on: Windows x64 Installer	153.92 MB

GITHUB:
1. Create Git Account and Login
2. Create a new Repo for our training
	Click on the + symbol on top, now click create new repo
	In the new page, enter the repo name
	Enter a suitable note/description for the repo
	Keep the Repo public
	Select the check box add readme file
	Now click on the create repository (green color) button
3. Create Personal Access Token (PAT)
	Click on profile icon (Top right corner)
	Click settings
	In new windown scroll down and on left, click developer settings
	In new window, on top right, click personal access tokens, select Tokens classic
	In new window, click generate new token, select generate new token classic
	In window, add suitable note
	Click Expiration, selecty No expiry
	Under Scope, select only the 1st (top most) check box named "Repo"
	Now fully scroll down and click Generate PAT
	Now Copy the PAT (Click the copy button)
	Now mail the PAT to yourself (confidentiality) [Use the mail subject as "git pat"]
4. Configuration commands (To link our git account on the system we working)
	$ git config --global user.name "USERNAME"
	
	$ git config --global user.email "EMAIL"

TRAINER REPO LINK:
https://github.com/neelmyna/java_dsa

To Download/Clone/Copy the TRAINER REPO. Use the command:
$ git clone https://github.com/neelmyna/java_dsa



9-06-2025: Session-2
SESSION2:
To Copy A Repo into our system (Laptop):
$ git clone Repo_Link
$ git clone https://github.com/neelmyna/java_dsa

The above command copies the given Repo into out computer. The Copy of the Repo in the Server (github) can be called as Remote Repo and the copy of the Repo in our computer can be called as Local Repo.



to copy a repo into our system:
git clone "RepoLink"-----copies the given repo into the computer.copy of repo in server can be called as remote repo and in our computer is called as local repo

template:
$git clone https://<PAT>@Repo_link
to do push commands without authentication everytime

to push content into the repo that is to copy the from local repo to remote repo, the commands are:
steps and commands:
1)first ask the git to list down all the files that need to be pushed
$git add path
git add c:/learning/java_dsa or
git add .   --- . means current path

2)ask the git to create a secured object in which all the files to be pushed are copied.
$ git commit -m "java dsa notes added"

3)push (upload):
$git push (Always push to main branch) or 
$git push origin main

$) check status:
$git status



in vscode ----> ctrl+g takes from any line to required line

----------> Primitive types in java:
NUmeric: 
number only-> byte ,short, int, long
with precision->float , double
CHar: boolean--1 bit
_______________________________________
Arithematic operators: + - * / %
all are binary operators....since all operators take two operands
expression is written using INFIX notation
i/p are  numbers and o/p is also a number

bodmas rule and power operator has highest precedence andd it has right to left associativity when an expression has two power operators ex 2**3**2---> frst 3**2=9 and the 2**9
every infix operation is frst converte to postfix and then evaluated

float num=5.5f;
if float num=5.5;  it is error cuz it is considered as double.

every c program is a cpp program...but not viceversa as cpp is superset of c and cpp inherited c.

sum=5+5.5---> when expression has different data types the lower size data type converted to higher size data type and then the expression is evaluated.cuz data should not be lost that is the decimal part of the data....
_______________________________________
DAY2::::

Relational operators:
> < >= <= != ==

i/p are numbers and o/p is boolean--1all afe binary operators and used with infix notation....
lesser precedence than arithematic operators...higher than logidcal operators...

for(i=1;i<=20;i++) more readable than for(i=1;i<21;i++)

[10,40] closed interval 10 to 40
(23,30) open interval 24 to 29
[35,65) right open 35 to 64

i=10;
j=5;
i++;
--j;
b[j]--;

i=10;
j=5;
a[++=]=b[--j]--;
_______________________________________
Logical operators: & && | || !

i/p are boolean and o/p is also boolean
all are binary operators except the not  operatorslesser precedence than arithematic and relational but has higher precedence than assignment.

pre increment and post increment operators have lesser precedence than assignment.

Dot operator : object.field
parenthesis has highest priority
not an operator but used to override the precedence of an operator
_______________________________________

**ctrl shift u ----> upper case
  ctrl u ---> lower case
_______________________________________
JAVA PROGRAM STRUCTURE:

DISADVANTAGES OF C++:
main() must be a global function.
Global functions were allowed. Thus the solutions (apps.software) created with neither procedural nor OO.
global variables are still allowed in C++.
Files are loaded using macros and stored till end of the program
pointers were always a mess to many a programmers
The onus of creating and deleting objects in the Heap is on programmer.
The inheritance is by default private which makes the accessing the inherited properties very difficult.
Multiple inheritance creates a solution which is low cohesive.
The operator overloading concept can be used to just implement anything which is unnecessary
The compiler creates object file which is environment restricted/specific/dependent.
Handling  runtime errors is difficult.
Objects can be created in Stack area as well.
Array is primitive in C++
_______________________________________
Java:
No global functions. All are only methods. So you have strict OO solution.
No global variables.
signed and unsigned removed. Thus the primitive DTs are simplified.
libraries can be loaded and used dynamically (No pre-processors)
Pointers are abstracted and users are given references.
All objects are created in Heap only
Array is an object in java
Creating object is the only job the programmer does. Object deletion is automated with the concept GRABAGE COLLECTOR.
The inheritance is always public in Java
There is no Multiple inheritance. All classes are always High cohesive. Thus the implementation is very easy.
The only operator that can be overloaded is + and only for string concatination.
The compiler creates bytecode which is environment(OS) independent.
Handling  runtime errors is easy via exception Handling.
The friend concept is removed. Thus no more ambiguous and complex classes.
_______________________________________
#include----> # is preprocessor or macros include is used to load
_______________________________________
my_function(args*)---->function def like this in python can take ny number of parameters->python
_______________________________________
super refers to immediate parent function.
_______________________________________
non static methods are instance methods---public void myfunction(){}
/0 end of string char in cpp
		Flight flight =new Flight();
Flight is class flight is reference variable of FLight
jvm calls main function and frame for main function is created and instances are created inside it
main is a static method
_______________________________________
round()
ceil()----> 7.8899=7, 7.0001=7
floor()
_______________________________________
java virtual machine, securty manager, memory management, garbage collector, byte code verifier, LL(....Loader)--> combinedly Java  runtime environment
______________________________________ 
public static void---> why is it static? ...jvm calls main function....whenn jvm has to call main which is inside a class ...if it is not static it has to invoke that main via creating object for that class which is of no use..because at the very beginnning there are no objects for the class...if it is static main method can be called via class name...
*** Cannot use this in static method

for jvm to access the members of a class which are in another package it should be public
______________________________________
to call methods:
instance method----object.method
static methods----classname.method_
______________________________________
why constructor should have same name as of class?

A constructor has no return type and is automatically called when an object is created....if we give a return type it is no more a constructor...if it returns there is no way to catch it or utilize it...

thennn...can we write void as void also have no return type?....we r using void that meanss....methods are capable of returning but we dont want them to return so we use void...but constructor method doesnt return a value always....so no void...

By giving it the same name as the class, the compiler knows this is a constructor, not a normal method.
If the constructor had a different name, the compiler would treat it as a regular method and wouldnâ€™t call it during object creation.
______________________________________
System.out.print():
System is class available in java.lang package; out is a static reference variable of system class; print is... 
public final class System{
      public static final PrintStream out;   // final class cannot be inherited
}

***
Final variable:::  once initialized cannot be mutated, they are read only variable, can be both static and non static...
Final class::: cannot extend or inherit
Final method:::method cannot be overriden in child class
______________________________________
Arrays:
Data structure to store elements of same data type..storing data, arranging or organising it in memory in a specific way to achieve some efficiency..
continuous storage or memory location...
no gap between consecutive elements in an array
Array is an object in java cuz objects has the array itself and also length variable in it...
size created cannot be changed
to delete array, make the reference null..
memory in-efficient and time efficient data structure
elements accessed using index---> accessing or reaching is called lookup
most simple and primary ds

creation of array::
int array[10];
int[] array = new int[size];
int array = new int[5]{1,2,3,4,5};  //Error
int array = new int[]{1,2,3,4,5};   //No Error
int array = {1,2,3,4,5};

2D:::
int[][] matrix;
matrix = new int[3][4];


primitives in java are called by value
remaining are called by object
______________________________________
Thread is a light weight process.
Multi threading:::   multiple functions or processes functioning or running paralelly.
Java supports multi threading.
______________________________________
UAT: user acceptance test
______________________________________
CONSTRUCTORS::::

* FUNCTION OVERLOADING:
-> Function Overloading is Compile time (static/early) binding/polymorphism.
-> Whcih of the overloaded method must be called is decided compiler.
-> The overloaded methods if have same arument list but different return types then it is an error. Because the change must be present at prologue and if the change is only present at epilogue.
-> The overloaded methods must differ in their argument list either by number of arguments or data type of the arguments, or if in case if both the number of arguments and their types are same then the order must be different.
JOb is to initialize an object

Constructors-->

CONSTRUCTORS:
* A constructor is a instance method.
* It is called/invoked always implicitly (by the JVM) as soon as an object is created (Objects gets memory allocation. That means object's reference value is created)
* The object must have same name as that of the class so that the compiler/JVM knows which of the non static methods in the class are the constructors.
* We can define more than 1 constructor in class. Thus all the constructors must/will have same name. This concept is caleld as FUNCTION OVERLOADING.
* 
Assume there is class by name Flight
Flight() {

}

Flight(String code) {

}

main() { // Assume the systax is correct
	Flight flight = new Flight();
}

String calcBillAmount(int, float) {

}
int calcBillAmount(int, float) {

}

calcBillAmount(35, 45.5f);


 cannot be final...as all constructors are always final by nature..i.e, suppose the constructor is overrriden in sub class and we create an object of the base class ,, the overrriden constructor in subclass always becomes unreachable...it would be redundant to mark them final as they are already final...
 cannot be static becuse constructor is working for object and it is always having this...hence cannot be static
 99% public in most cases but can be private
 cannot return value ever hence its return type is always void..no return type need to be mentioned...(always implicityly final)
 cannot be abstract cuz a class whose instance method is abstract, its object cannot be created...and even if the constructor is defined in derived class, we know its unreachable
 abstract--->
 if a method in the class is abstract----class must be abstract...
 even if all methods are defined in class,,still class can be marked as abstract
 class having all methods abstract except constructors said to be 100% abstract
 id derived class failsto define anyone of the abstract methods of the parent class then itiitself must be  marked abstract
 abstract class can still be used via its static members
 abstract says u must override...final says must not...so class connot be both abstract and final
______________________________________
Relationships in OOP:
 Generalisation (Inheritance)--> is-a type-of
 Association ---> has-a part-of  
     Aggregation(Weak or Optional association)...when the whole object is independent of the part object then it is aggregation....
	 when the part object(Containee) and the whole object(container) can exixt independent of each other....
	 
	 Composition:
	When the whole object existence is dependent on the part object existance.
	When the containee and container cannot exist independetn of eachother.
______________________________________

n=9; 21,43,81,13,75,66,54,98,39
x=4; y=5;
     13,21,39,43,54,66,75,81,98
	x=13,21,39,43    y=54,66,75,81,98
	
read n value
read x value
read y value
read n elements of the array
sort the array ...arrays.sort()
p = array[y]-array[y-1]-1
print p as output


______________________________________
linear, binary, bubble, selection,
insertion, quick, merge
avl tree,, stack, queue
mysql-jdbc
java concepts
______________________________________

n=9,
18,36,5,79,50,65,30,15,33

n=7
15,23,5,30,40,55

n=6
50,40,35,30,20,15
______________________________________

Function call stack:::
IR:INSTRUCTION REG--holds address if the current address or statement that is currently running

PC:PROGRAM COUNTER--holds address of next inst to be executed

SP:STACK POINTER--holds address of top frame of the stack

FP:FRAME POINTER--holds address of the frame of the function which is currently running or in which the control is in
SP and FP null it is the end of the program
______________________________________

frame:: memory allocated to a functions during run time.
contents o frame:::
local variables--->initially its value is empty
function params
(functions are called at run time)
called Funtion adressers
Return address












